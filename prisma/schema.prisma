// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgres://kms:password@localhost:5433/kmsdb"
}

model KnowledgeBase {
  id              String                  @id @default(cuid())
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt
  slug            String
  title           String
  description     String
  defaultLanguage String
  layout          String
  color           Int
  enabled         Boolean
  languages       String
  links           String
  logo            String
  seoImage        String
  categories      KnowledgeBaseCategory[]
  articles        KnowledgeBaseArticle[]
  views           KnowledgeBaseViews[]

  @@unique([slug])
}

model KnowledgeBaseCategory {
  id              String                         @id @default(cuid())
  knowledgeBaseId String
  knowledgeBase   KnowledgeBase                  @relation(fields: [knowledgeBaseId], references: [id])
  slug            String
  order           Int
  title           String
  description     String
  icon            String
  language        String
  seoImage        String
  sections        KnowledgeBaseCategorySection[]
  articles        KnowledgeBaseArticle[]

  @@unique([knowledgeBaseId, slug])
}

model KnowledgeBaseCategorySection {
  id          String                 @id @default(cuid())
  categoryId  String
  category    KnowledgeBaseCategory  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  order       Int
  title       String
  description String
  articles    KnowledgeBaseArticle[]
}

model KnowledgeBaseArticle {
  id                 String                          @id @default(cuid())
  createdAt          DateTime                        @default(now())
  updatedAt          DateTime?                       @updatedAt
  knowledgeBaseId    String
  knowledgeBase      KnowledgeBase                   @relation(fields: [knowledgeBaseId], references: [id])
  categoryId         String?
  category           KnowledgeBaseCategory?          @relation(fields: [categoryId], references: [id])
  sectionId          String?
  section            KnowledgeBaseCategorySection?   @relation(fields: [sectionId], references: [id])
  slug               String
  title              String
  description        String
  order              Int
  contentDraft       String
  contentPublished   String
  contentType        String
  language           String
  featuredOrder      Int?
  author             String
  seoImage           String
  publishedAt        DateTime?
  relatedInArticleId String?
  relatedInArticle   KnowledgeBaseArticle?           @relation("relatedArticles", fields: [relatedInArticleId], references: [id])
  relatedArticles    KnowledgeBaseArticle[]          @relation("relatedArticles")
  views              KnowledgeBaseArticleViews[]
  upvotes            KnowledgeBaseArticleUpvotes[]
  downvotes          KnowledgeBaseArticleDownvotes[]

  @@unique([knowledgeBaseId, slug])
}

// model KnowledgeBaseArticleReaction {
//   id        String               @id @default(cuid())
//   createdAt DateTime             @default(now())
//   articleId String
//   article   KnowledgeBaseArticle @relation(fields: [articleId], references: [id])
//   cookie    String
//   type      String
// }

model KnowledgeBaseViews {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  knowledgeBaseId String
  knowledgeBase   KnowledgeBase @relation(fields: [knowledgeBaseId], references: [id], onDelete: Cascade)
  userAnalyticsId String

  @@unique([knowledgeBaseId, userAnalyticsId])
}

model KnowledgeBaseArticleViews {
  knowledgeBaseArticleId String
  knowledgeBaseArticle   KnowledgeBaseArticle @relation(fields: [knowledgeBaseArticleId], references: [id], onDelete: Cascade)
  userAnalyticsId        String

  @@unique([knowledgeBaseArticleId, userAnalyticsId])
}

model KnowledgeBaseArticleUpvotes {
  createdAt              DateTime             @default(now())
  knowledgeBaseArticleId String
  knowledgeBaseArticle   KnowledgeBaseArticle @relation(fields: [knowledgeBaseArticleId], references: [id], onDelete: Cascade)
  userAnalyticsId        String

  @@unique([knowledgeBaseArticleId, userAnalyticsId])
}

model KnowledgeBaseArticleDownvotes {
  createdAt              DateTime             @default(now())
  knowledgeBaseArticleId String
  knowledgeBaseArticle   KnowledgeBaseArticle @relation(fields: [knowledgeBaseArticleId], references: [id], onDelete: Cascade)
  userAnalyticsId        String

  @@unique([knowledgeBaseArticleId, userAnalyticsId])
}
